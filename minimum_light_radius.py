"""
binarysearch.com :: Minimum Light Radius
jramaswami
"""


from math import inf
from bisect import bisect_right


EPS = 0.000001


class Solution:
    def solve(self, nums):
        """
        This solution uses a binary search for the answer strategy.
        """

        # Corner case.
        if nums == []:
            return 0

        nums.sort()

        def can_cover(r):
            """Return True if r can cover the space with 3 or less lights."""
            prev_house = nums[0]
            for _ in range(1, 4):
                # Light i will cover up to previous light + (2 * r)
                # Find the first light to the right of the space covered by
                # the light.
                light_i_covers_to = bisect_right(nums, prev_house + (2 * r))
                if light_i_covers_to >= len(nums):
                    return True
                prev_house = nums[light_i_covers_to]

            # If we have reached then end, then we could not cover the
            # entire space.
            return False


        lo = 0
        hi = nums[-1] - nums[0]
        soln = inf
        while hi - lo > EPS:
            r = (lo + hi) / 2
            # Can r cover the entire space?
            if can_cover(r):
                soln = min(soln, r)
                # Move high down.
                hi = r
            else:
                # Move low up
                lo = r

        return soln


def test_1():
    nums = [3, 4, 5, 6]
    expected = 0.5
    assert abs(Solution().solve(nums) - expected) < EPS


def test_2():
    nums = [296, 938, -935, -868, -578, 438, -572, 97, 21, 491, -759, 761, -110, 39, -137, -848, 313, -776, 462, 368, 104, -439, -621, 21, -970, 750, 435, 564, 766, -720, 749, 829, 211, 295, 79, -880, -540, -537, -437, 193, -140, -184, 984, -702, 43, -589, 509, -249, -120, 52, -832, 721, -775, -216, 620, -901, -836, -167, -420, -470, 491, 109, 161, 401, -977, 105, 428, -982, -188, 288, -561, 229, -849, 764, -731, -332, -69, -302, 503, 935, -514, 813, -585, -829, -285, 637, 608, -557, -387, -127, -570, 611, -309, 78, -780, -626, -343, -780, 488, -479, 548, -79, -877, 685, 515, -986, -110, -662, 357, -284, -883, 536, 234, 7, 692, 559, -347, -660, -517, 767, 66, -742, 538, -608, -735, 353, -644, 379, 458, -841, 756, -157, -348, -195, -448, -630, 555, 126, -197, 4, 80, -930, 42, -148, -440, -329, 620, -208, 541, -659, 592, 641, 387, -338, -370, -878, 481, -132, 700, -324, -86, 533, -503, 5, -358, -485, 927, 219, 223, 857, 75, 416, 9, 685, -125, -21, 491, -977, 936, -815, -72, 95, -125, 593, -394, 856, 885, 109, 167, -553, -7, 287, -268, 305, 903, -893, 925, -613, 22, -973]
    expected = 324
    assert abs(Solution().solve(nums) - expected) < EPS


def test_3():
    nums = [-931, 988, 277, -399, -629, -388, -608, 697, -907, -616, 315, -541, 19, -275, 380, -103, 210, -766, 479, 694, 147, -748, -361, 435, 671, 736, 104, 472, 325, -638, -624, -82, 199, -519, 332, 518, -951, -388, 261, -672, -42, -706, -987, -900, 980, 17, -466, 667, -31, 618, -642, 317, 691, -501, -987, -530, -479, -531, 190, -179, -582, -415, -873, 788, -547, -600, -870, 693, -323, -801, 863, 176, 207, 706, 332, 909, -208, 754, 137, -665, 456, -615, -704, 650, 480, 930, -451, -831, -896, 297, -550, 624, -18, 583, -733, -856, 468, -576, 907, 113, 904, 195, -513, -963, -308, -85, 839, 189, 521, -293, -658, -491, 208, 954, -130, -27, 699, -577, -790, -278, -549, 844, -195, 955, 224, 365, -357, 838, 422, -294, -586, -287, 635, -921, -312, -719, 27, 441, -176, 786, 508, 720, -566, -404, 705, 412, 181, 976, 287, 299, -10, 190, -104, -694, -569, 871, -208, -600, -747, 311, -847, -421, 874, 149, -4, 882, 648, -928, 798, -333, -197, 47, 924, -226, 800, 186, -256, -204, -656, 850, 603, 663, 762, -718, 772, -75, -438, -363, 509, -486, 142, 303, -916, 26, -913, -370, 815, 376, -972, 223, -141, 492, -822, 474, -10, -62, -134, 595, -428, -680, -429, 880, 545, -87, -776, -715, 120, 889, -777, -581, 415, 890, 963, 66, -369, 388, -630, 471, 320, -672, 985, 1000, 158, 146, -909, 716, -490, 537, 410, 516, 657, 507, 734, -699, 791, -217, 545, 16, -54, -80, -263, -216, 676, -799, 754, 803, -164, -917, -454, 995, -637, 706, -697, 626, -28, -343, 546, -464, -297, 380, -574, 755, 49, 583, 526, -686, 734, -823, -223, 411, 226, 650, -653, -518, 768, -732, 446, -838, 327, -156, 790, 685, 725, -978, -806, 225, 530, -743, -755, 292, 956, -615, -257, 746, -104, 264, -528, -629, 947, -507, -354, -496, 660, -210, -151, -397, 952, 788, 48, -28, -934, 25, 453, 447, 523, 716, 216, 103, 992, -943, 876, -782, 375, -780, 971, 985, -5, -298, -435, 256, 540, -875, -819, 412, 849, -560, 31, 129, 417, -228, -222, -928, 354, 199, -26, 783, -766, 901, -919, -103, 435, 682, -529, -882, 698, -34, 851, -265, -160, 995, -566, -972, 613, -621, -565, 732, 130, -742, 951, 263, -281, 137, -86, -127, 37, -800, -176, 534, 830, -367, -260, -550, -249, 160, -111, 474, 996, -33, 790, 917, -240, 717, 576, -391, 314, -512, -969, 223, -857, -627, 605, 654, 720, 173, -675, 517, -266, 975, -524, 385, 318, 948, 104, 862, 865, 76, 462, -462, -513, 176, -443, -831, -878, 943, 241, 562, -587, 659, 445, 11, 39, 765, 840, -897, -537, 568, 473, 823, -696, -986, 119, 566, -572, -283, 672, -647, -269, -926, -81, 177, 170, 749, -10, -38, 97, -383, -964, 322, -650, 270, -4, 910, 492, 829, -814, -377, -777, 151, 704, 357, 510, 311, 165, 179, -709, -294, 5, -50, 229, 39, -626, 79, -504, -300, 720, 604, 508, 596, 4, -471]
    expected = 327.5
    assert abs(Solution().solve(nums) - expected) < EPS


def test_4():
    nums = []
    expected = 0
    assert abs(Solution().solve(nums) - expected) < EPS


def test_5():
    """WA"""
    nums = [0]
    expected = 0
    assert abs(Solution().solve(nums) - expected) < EPS
