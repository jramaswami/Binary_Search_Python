"""
binarysearch.com :: Eat Bananas in K Hours
jramaswami
"""


class Solution:

    def solve(self, piles, hours):

        # Binary search for the answer.
        lo = 1
        hi = max(piles)
        soln = hi
        while lo <= hi:
            mid = (lo + hi) // 2
            # Figure out how many hours are needed to eat each pile, which
            # is the ceiling of p / r where p is the bananas in the pile
            # and r is the bananas per hour.
            hs = sum((p + mid - 1) // mid for p in piles)
            if hs <= hours:
                # You can eat all bananas mid per hour.
                soln = min(soln, mid)
                # Try eating less bananas per hour.
                hi = mid - 1
            else:
                # You cannot eat all the bananas mid per hour so try
                # a higher number than mid.
                lo = mid + 1

        return soln


def test_1():
    piles = [6, 4, 3]
    k = 5
    assert Solution().solve(piles, k) == 3


def test_2():
    piles = [596, 329, 765, 778, 249, 426, 198, 295, 314, 521, 438, 733, 829, 705, 972, 402, 149, 584, 322, 199, 38, 780, 48, 305, 153, 677, 703, 551, 14, 576, 150, 331, 403, 553, 737, 534, 567, 979, 206, 151, 564, 601, 714, 347, 154, 989, 97, 167, 171, 157, 90, 556, 298, 214, 438, 641, 634, 127, 906, 495, 751, 819, 741, 565, 825, 477, 289, 646, 342, 510, 778, 942, 990, 172, 235, 762, 89, 658, 145, 225, 241, 796, 564, 871, 959, 849, 776, 916, 253, 285, 859, 439, 49, 235, 376, 353, 22, 328, 544, 966, 59, 384, 917, 774, 707, 595, 486, 618, 286, 153, 405, 237, 703, 332, 555, 719, 398, 855, 624, 859, 259, 322, 718, 732, 484, 50, 373, 65, 997, 217, 887, 235, 303, 166, 476, 832, 694, 852, 320, 932, 629, 301, 711, 866, 916, 229, 691, 733, 900, 574, 899, 108, 484, 273, 886, 389, 591, 708, 672, 369, 927, 745, 350, 496, 930, 861, 989, 56, 139, 67, 726, 833, 174, 510, 821, 223, 761, 648, 744, 470, 487, 529, 825, 63, 485, 294, 597, 701, 382, 914, 608, 391, 983, 783, 136, 664, 275, 722, 770, 535, 726, 940, 75, 808, 995, 37, 820, 382, 206, 838, 311, 285, 325, 239, 474, 122, 427, 703, 121, 331, 996, 842, 89, 980, 250, 342, 897, 799, 712, 762, 818, 580, 71, 969, 354, 174, 26, 171, 683, 384, 835, 123, 748, 769, 371, 363, 98, 781, 847, 302, 306, 499, 227, 700, 922, 33, 294, 606, 583, 427, 538, 652, 675, 160, 580, 145, 822, 841, 236, 677, 607, 976, 672, 107, 123, 325, 91, 40, 992, 804, 156, 249, 918, 380, 679, 624, 718, 117, 332, 319, 872, 926, 250, 16, 5, 889, 505, 542, 119, 336, 469, 606, 386, 359, 237, 269, 907, 289, 834, 173, 725, 840, 93, 296, 3, 928, 513, 406, 955, 707, 639, 31, 677, 774, 800, 844, 500, 399, 35, 901, 1000, 432, 467, 589, 179, 105, 10, 201, 719, 575, 368, 81, 656, 603, 412, 282, 96, 644, 971, 368, 973, 199, 842, 622, 361, 985, 564, 226, 190, 825, 425, 843, 366, 858, 668, 32, 201, 339, 816, 834, 607, 456, 161, 529, 693, 248, 415, 196, 939, 860, 365, 29, 79, 624, 301, 984, 700, 821, 358, 916, 800, 538, 193, 375, 189, 665, 19, 425, 674, 70, 892, 241, 130, 354, 864, 480, 614, 277, 857, 494, 782, 554, 709, 559, 859, 734, 2, 193, 271, 788, 68, 541, 312, 235, 989, 568, 419, 380, 658, 706, 212, 867, 999, 271, 669, 121, 913, 647, 189, 789, 606, 467, 724, 504, 734, 20, 482, 683, 270, 496, 888, 483, 779, 128, 179, 929, 174, 952, 566, 393, 37, 422, 407, 1000, 189, 304, 651, 137, 68, 285, 558, 954, 537, 292, 798, 223, 999, 689, 110, 429, 387, 134, 240, 230, 175, 472, 427, 837, 959, 1000, 282, 338, 617, 501, 129, 571, 317, 772, 964, 395, 591, 633, 528, 207, 391, 668, 529, 232, 21, 383, 98, 136, 335, 502, 893, 97, 106, 529, 82, 148, 296, 205, 585, 678, 397, 834, 297, 135, 121, 380, 559, 639, 53, 597, 827, 274, 941, 299, 3, 577, 838, 677, 917, 205, 43, 561, 178, 353, 764, 459, 574, 115, 489, 1000, 564, 394, 589, 336, 505, 297, 277, 671, 835, 835, 889, 824, 387, 709, 648, 423, 947, 438, 808, 934, 449, 332, 716, 997, 248, 901, 322, 915, 949, 169, 368, 649, 392, 514, 684, 310, 974, 5, 906, 834, 614, 438, 878, 914, 78, 946, 848, 360, 243, 848, 829, 503, 305, 731, 138, 386, 507, 357, 261, 521, 619, 972, 474, 618, 820, 87, 260, 474, 913, 733, 788, 150, 647, 245, 624, 553, 206, 493, 372, 240, 801, 74, 797, 512, 620, 138, 254, 149, 336, 494, 663, 831, 850, 620, 939, 111, 19, 237, 847, 618, 663, 777, 588, 828, 417, 152, 221, 874, 370, 734, 977, 194, 153, 570, 279, 275, 679, 816, 943, 133, 83, 51, 567, 645, 992, 115, 721, 443, 986, 112, 710, 360, 585, 134, 415, 982, 5, 975, 435, 97, 992, 274, 21, 767, 651, 279, 338, 296, 231, 247, 561, 764, 630, 227, 356, 867, 814, 590, 259, 518, 242, 614, 972, 712, 861, 552, 238, 432, 374, 151, 290, 873, 776, 652, 345, 432, 926, 899, 50, 489, 119, 781, 686, 437, 533, 822, 320, 976, 615, 437, 514, 992, 875, 477, 783, 752, 119, 909, 766, 286, 772, 449, 717, 453, 90, 519, 669, 209, 351, 760, 579, 738, 980, 412, 212, 186, 487, 642, 515, 87, 411, 515, 870, 238, 95, 886, 442, 457, 503, 32, 406, 670, 989, 93, 132, 714, 952, 570, 191, 983, 356, 267, 917, 321, 380, 722, 381, 609, 36, 732, 578, 398, 428, 145, 12, 433, 64, 385, 557, 332, 362, 675, 570, 710, 628, 797, 110, 437, 223, 883, 564, 63, 990, 629, 57, 267, 169, 152, 118, 819, 479, 292, 498, 895, 996, 456, 972, 586, 100, 827, 46, 770, 882, 657, 910, 844, 819, 879, 167, 110, 814, 267, 663, 457, 90, 28, 441, 188, 105, 207, 271, 119, 953, 120, 167, 389, 38, 331, 630, 595, 198, 28, 336, 601, 273, 495, 235, 780, 900, 904, 937, 806, 960, 949, 146, 698, 952, 847, 499, 707, 119, 246, 779, 158, 980, 356, 248, 269, 480, 341, 299, 665, 541, 893, 518, 644, 998, 43, 200, 77, 62, 343, 575, 984, 515, 895, 608, 414, 819, 306, 734, 932, 14, 893, 374, 336, 762, 612, 297, 831, 770, 678, 275, 676, 426, 954, 318, 60, 445, 272, 704, 769, 981, 747, 683, 550, 292, 830, 685, 630, 79, 725, 973, 885, 29, 561, 920, 919, 400, 692, 726, 85, 573, 700, 900, 824, 399, 912, 431, 491, 741, 161, 109, 54, 876, 634, 760, 146, 896, 515, 54, 663, 475, 315, 162, 511, 263, 792, 670, 74, 185, 636, 687, 260, 270, 8]
    k = 2456
    assert Solution().solve(piles, k) == 261


def test_3():
    """RTE"""
    piles = [1]
    k = 1
    assert Solution().solve(piles, k) == 1
