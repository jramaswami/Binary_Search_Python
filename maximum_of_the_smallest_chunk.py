"""
binarysearch.com :: Maximum of the Smallest Chunk
jramaswami
"""


class Solution:

    def solve(self, nums, k):

        def check(min_sum, total):
            """
            Return True if it is possible to make divide the nums into
            k chunks such that no sum(chunk) < min_sum
            """
            chunks = 1
            chunk_sums = 0
            curr_sum = 0
            for n in nums:
                if curr_sum < min_sum:
                    curr_sum += n
                else:
                    chunks += 1
                    chunk_sums += curr_sum
                    curr_sum = n

                if chunks >= k:
                    curr_sum = total - chunk_sums
                    break

            return curr_sum >= min_sum and chunks == k

        # Binary search for the answer.
        lo = min(nums)
        hi = total = sum(nums)
        soln = 0
        while lo <= hi:
            mid = lo + ((hi - lo) // 2)
            ok = check(mid, total)
            print(lo, hi, mid, ok)
            if ok:
                soln = max(mid, soln)
                lo = mid + 1
            else:
                hi = mid - 1
        return soln


def test_1():
    nums = [1, 5, 3, 4, 7]
    k = 3
    expected = 6
    assert Solution().solve(nums, k) == expected


def test_2():
    "WA"
    nums = [1, 2, 1]
    k = 2
    expected = 1
    assert Solution().solve(nums, k) == expected


def test_3():
    nums = [40, 58, 84, 39, 75, 97, 28, 33, 28, 96, 17, 48, 82, 97, 15, 24, 61, 55, 67, 83, 70, 2, 56, 28, 23, 55, 59, 17, 85, 51, 75, 6, 49, 8, 80, 55, 49, 42, 85, 31, 44, 2, 26, 16, 72, 85, 57, 70, 18, 99, 15, 75, 26, 73, 43, 72, 99, 66, 99, 17, 67, 57, 44, 21, 94, 79, 2, 76, 14, 96, 28, 86, 50, 55, 83, 6, 92, 9, 42, 78, 44, 5, 78, 33, 83, 50, 35, 63, 75, 64, 94, 54, 79, 2, 50, 21, 7, 13, 84, 57, 36, 42, 93, 72, 67, 84, 13, 37, 56, 24, 21, 53, 60, 23, 11, 38, 35, 18, 35, 57, 41, 1, 23, 63, 32, 79, 36, 73, 100, 29, 49, 63, 23, 49, 14, 22, 51, 45, 5, 52, 41, 51, 71, 85, 25, 9, 62, 21, 18, 17, 39, 41, 75, 27, 10, 8, 80, 63, 72, 85, 74, 11, 63, 72, 33, 81, 73, 99, 74, 63, 39, 24, 15, 12, 65, 74, 22, 81, 90, 72, 21, 81, 30, 2, 52, 57, 52, 11, 61, 75, 92, 78, 89, 2, 69, 72, 88, 17, 96, 79, 4, 100, 60, 85, 12, 66, 89, 90, 39, 100, 96, 32, 45, 72, 75, 23, 65, 4, 37, 45, 100, 64, 94, 85, 6, 87, 69, 85, 87, 46, 93, 94, 83, 18, 96, 22, 14, 51, 56, 93, 85, 49, 79, 13, 10, 50, 38, 33, 65, 2, 11, 71, 8, 32, 81, 76, 34, 79, 79, 28, 72, 30, 43, 41, 86, 22, 99, 38, 4, 11, 5, 41, 8, 71, 14, 75, 38, 42, 24, 23, 28, 64, 46, 85, 7, 43, 96, 15, 35, 96, 88, 19, 65, 74, 41, 9, 7, 85, 57, 67, 82, 10, 41, 66, 60, 89, 77, 67, 77, 2, 74, 19, 99, 49, 58, 42, 17, 42, 6, 100, 80, 24, 77, 39, 4, 36, 23, 96, 3, 53, 85, 89, 99, 1, 69, 63, 42, 77, 57, 98, 85, 8, 75, 29, 51, 40, 23, 16, 67, 78, 74, 84, 23, 46, 79, 35, 70, 43, 63, 52, 34, 79, 11, 19, 14, 64, 50, 81, 31, 35, 24, 38, 60, 14, 86, 22, 76, 80, 46, 98, 68, 32, 41, 48, 6, 74, 50, 66, 70, 70, 51, 11, 58, 48, 94, 25, 79, 66, 19, 44, 86, 47, 11, 9, 8, 77, 11, 93, 3, 72, 27, 40, 85, 91, 41, 36, 47, 32, 18, 61, 50, 44, 57, 10, 66, 24, 97, 11, 58, 55, 2, 52, 36, 61, 59, 75, 88, 37, 65, 59, 68, 82, 50, 53, 30, 76, 52, 11, 95, 5, 51, 95, 34, 47, 27, 86, 28, 39, 27, 25, 91, 28, 87, 3, 13, 70, 32, 47, 22, 64, 40, 65, 5, 62, 96, 54, 29, 60, 43, 81, 15, 53, 98, 81, 100, 73, 81, 85, 94, 50, 72, 24, 50, 89, 29, 73, 65, 14, 90, 95, 84, 4, 95, 52, 84, 2, 13, 59, 35, 51, 7, 6, 40, 5, 66, 61, 35, 65, 83, 63, 14, 88, 35, 93, 66, 28, 8, 57, 78, 63, 84, 32, 12, 99, 57, 21, 85, 16, 88, 57, 67, 51, 95, 71, 77, 23, 67, 100, 39, 97, 15, 65, 61, 68, 48, 48, 1, 17, 73, 18, 48, 27, 91, 99, 56, 9, 53, 39, 92, 48, 54, 36, 85, 15, 46, 95, 64, 40, 2, 78, 94, 13, 5, 12, 31, 54, 87, 59, 83, 18, 68, 23, 75, 19, 86, 29, 77, 70, 94, 40, 86, 49, 84, 70, 84, 60, 74, 79, 24, 41, 17, 1, 94, 20, 23, 21, 3, 92, 37, 31, 23, 48, 81, 70, 3, 99, 43, 98, 33, 59, 22, 16, 21, 49, 28, 93, 5, 4, 89, 7, 95, 39, 18, 89, 75, 43, 86, 50, 34, 86, 83, 86, 61, 47, 12, 10, 49, 86, 19, 65, 46, 37, 54, 76, 46, 72, 27, 41, 39, 98, 94, 96, 40, 31, 36, 56, 25, 15, 8, 75, 73, 4, 78, 79, 52, 59, 12, 54, 22, 84, 2, 30, 22, 52, 16, 68, 65, 76, 83, 70, 6, 18, 29, 22, 56, 25, 66, 66, 99, 96, 9, 48, 37, 90, 49, 92, 43, 46, 37, 85, 99, 41, 69, 73, 68, 62, 77, 57, 51, 95, 67, 94, 66, 40, 24, 40, 62, 61, 2, 75, 84, 6, 85, 63, 24, 81, 14, 55, 17, 22, 33, 11, 82, 66, 58, 48, 88, 23, 18, 82, 54, 10, 73, 2, 19, 76, 88, 90, 66, 86, 46, 43, 17, 36, 75, 77, 6, 42, 82, 90, 53, 96, 55, 57, 56, 76, 76, 91, 77, 24, 19, 36, 54, 5, 26, 42, 77, 54, 52, 13, 69, 16, 90, 9, 1, 17, 35, 12, 37, 16, 79, 44, 88, 58, 70, 88, 54, 17, 29, 90, 8, 66, 15, 63, 5, 17, 87, 95, 11, 57, 54, 99, 30, 29, 4, 20, 34, 85, 98, 39, 68, 14, 49, 18, 77, 73, 21, 99, 89, 86, 26, 90, 6, 35, 43, 18, 78, 41, 77, 41, 15, 88, 94, 45, 33, 24, 70, 2, 67, 13, 19, 56, 17, 5, 94, 78, 31, 5, 17, 15, 83, 31, 53, 68, 81, 99, 10, 44, 14, 97, 44, 37, 45, 88, 75, 69, 95, 85, 42, 57, 42, 26, 30, 25, 45, 33, 43, 23, 84, 55, 17, 62, 57, 4, 97, 74, 22, 71, 26, 1, 64, 53, 58, 41, 56, 66, 91, 4, 11, 19, 93, 17, 20, 26, 100, 31, 2, 53, 31, 71, 20, 8, 69, 96, 66, 81, 8, 20, 85, 90, 35, 44, 3, 2, 8, 18, 47, 25, 6, 10, 39, 68, 14, 42, 61, 87, 90, 6, 18, 76, 49, 48, 18, 46, 20, 82, 51, 51, 25, 7, 8, 28, 1, 64, 60, 33, 76, 80, 21, 88, 31, 24, 63, 66, 73, 28, 63, 38, 28, 29]
    k = 27
    expected = 1833
    assert Solution().solve(nums, k) == expected


def test_4():
    "WA"
    nums = [1]
    k = 1
    expected = 1
    assert Solution().solve(nums, k) == expected
